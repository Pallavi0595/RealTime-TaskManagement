{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\ReactForm\\\\realtime-app\\\\frontend\\\\src\\\\componets\\\\EditTaskModal.js\",\n  _s = $RefreshSig$();\n// EditTaskModal.js\nimport React, { useState, useEffect } from \"react\";\nimport { updateTaskStatus } from \"../api\"; // Assuming you have the updateTaskStatus function for PUT request\nimport \"./EditTaskModal.css\"; // Optional CSS file for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditTaskModal = ({\n  isOpen,\n  onClose,\n  task,\n  onTaskUpdated\n}) => {\n  _s();\n  const [taskName, setTaskName] = useState(\"\");\n  const [taskStatus, setTaskStatus] = useState(\"\");\n  useEffect(() => {\n    if (task) {\n      setTaskName(task.name);\n      setTaskStatus(task.status);\n    }\n  }, [task]);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const updatedTask = {\n      name: taskName,\n      status: taskStatus\n    };\n    try {\n      const updatedTaskData = await updateTaskStatus(task.id, updatedTask);\n      onTaskUpdated(updatedTaskData); // Pass the updated task to parent\n      onClose(); // Close the modal\n    } catch (error) {\n      console.error(\"Error updating task:\", error);\n    }\n  };\n  return isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modal-overlay\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Edit Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"taskName\",\n            children: \"Task Name:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"taskName\",\n            value: taskName,\n            onChange: e => setTaskName(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"taskStatus\",\n            children: \"Status:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            id: \"taskStatus\",\n            value: taskStatus,\n            onChange: e => setTaskStatus(e.target.value),\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Pending\",\n              children: \"Pending\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"In Progress\",\n              children: \"In Progress\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Completed\",\n              children: \"Completed\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Update Task\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: onClose,\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 7\n  }, this);\n};\n_s(EditTaskModal, \"Gv7dkJh+a5YBnXUDhCfk8zH9ezc=\");\n_c = EditTaskModal;\nexport default EditTaskModal;\nvar _c;\n$RefreshReg$(_c, \"EditTaskModal\");","map":{"version":3,"names":["React","useState","useEffect","updateTaskStatus","jsxDEV","_jsxDEV","EditTaskModal","isOpen","onClose","task","onTaskUpdated","_s","taskName","setTaskName","taskStatus","setTaskStatus","name","status","handleSubmit","e","preventDefault","updatedTask","updatedTaskData","id","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","value","onChange","target","required","onClick","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Desktop/ReactForm/realtime-app/frontend/src/componets/EditTaskModal.js"],"sourcesContent":["// EditTaskModal.js\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { updateTaskStatus } from \"../api\"; // Assuming you have the updateTaskStatus function for PUT request\r\nimport \"./EditTaskModal.css\"; // Optional CSS file for styling\r\n\r\nconst EditTaskModal = ({ isOpen, onClose, task, onTaskUpdated }) => {\r\n  const [taskName, setTaskName] = useState(\"\");\r\n  const [taskStatus, setTaskStatus] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (task) {\r\n      setTaskName(task.name);\r\n      setTaskStatus(task.status);\r\n    }\r\n  }, [task]);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const updatedTask = { name: taskName, status: taskStatus };\r\n\r\n    try {\r\n      const updatedTaskData = await updateTaskStatus(task.id, updatedTask);\r\n      onTaskUpdated(updatedTaskData); // Pass the updated task to parent\r\n      onClose(); // Close the modal\r\n    } catch (error) {\r\n      console.error(\"Error updating task:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    isOpen && (\r\n      <div className=\"modal-overlay\">\r\n        <div className=\"modal-container\">\r\n          <h2>Edit Task</h2>\r\n          <form onSubmit={handleSubmit}>\r\n            <div>\r\n              <label htmlFor=\"taskName\">Task Name:</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"taskName\"\r\n                value={taskName}\r\n                onChange={(e) => setTaskName(e.target.value)}\r\n                required\r\n              />\r\n            </div>\r\n            <div>\r\n              <label htmlFor=\"taskStatus\">Status:</label>\r\n              <select\r\n                id=\"taskStatus\"\r\n                value={taskStatus}\r\n                onChange={(e) => setTaskStatus(e.target.value)}\r\n                required\r\n              >\r\n                <option value=\"Pending\">Pending</option>\r\n                <option value=\"In Progress\">In Progress</option>\r\n                <option value=\"Completed\">Completed</option>\r\n              </select>\r\n            </div>\r\n            <div>\r\n              <button type=\"submit\">Update Task</button>\r\n              <button type=\"button\" onClick={onClose}>Cancel</button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    )\r\n  );\r\n};\r\n\r\nexport default EditTaskModal;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}