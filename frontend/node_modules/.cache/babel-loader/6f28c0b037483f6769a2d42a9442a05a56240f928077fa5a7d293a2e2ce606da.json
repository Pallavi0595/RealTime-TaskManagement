{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\ReactForm\\\\realtime-app\\\\frontend\\\\src\\\\componets\\\\TaskList.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// import { getTasks, deleteTask, updateTaskStatus } from \"../api\"; // Assuming you have these functions in api.js\n// import { FaEdit, FaTrash } from \"react-icons/fa\"; // Using react-icons for Edit and Delete icons\n// import TaskModal from \"./TaskModal\";\n// import \"./TaskList.css\"; // Ensure the CSS is imported for styling\n\n// const TaskList = () => {\n//   const [tasks, setTasks] = useState([]);\n//   const [isModalOpen, setModalOpen] = useState(false);\n//   const [taskToEdit, setTaskToEdit] = useState(null);\n\n//   // Fetch tasks from the backend\n//   const fetchTasks = async () => {\n//     try {\n//       const taskList = await getTasks(); // Replace with actual API call\n//       setTasks(taskList);\n//     } catch (error) {\n//       console.error(\"Error fetching tasks:\", error);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchTasks(); // Load tasks on page load\n//   }, []);\n\n//   // Show the Add Task modal\n//   const handleAddTask = () => {\n//     setTaskToEdit(null); // Clear any task that might be in edit mode\n//     setModalOpen(true);\n//   };\n\n//   // Handle task addition\n//   const handleTaskAdded = (newTask) => {\n//     setTasks((prevTasks) => [...prevTasks, newTask]); // Add new task to the list\n//   };\n\n//   // Handle Edit action\n//   const handleEdit = (task) => {\n//     setTaskToEdit(task); // Set the task that we want to edit\n//     setModalOpen(true); // Open the modal to edit the task\n//   };\n\n//   // Handle Delete action\n//   const handleDelete = async (taskId) => {\n//     try {\n//       await deleteTask(taskId); // Send delete request to API\n//       setTasks(tasks.filter((task) => task.id !== taskId)); // Remove deleted task from UI\n//     } catch (error) {\n//       console.error(\"Error deleting task:\", error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"task-list-container\">\n//       <h1>Real-Time Task Management Dashboard</h1>\n//       <button onClick={handleAddTask} className=\"add-task-btn\">Add Task</button>\n\n//       <table className=\"task-table\">\n//         <thead>\n//           <tr>\n//             <th>Task ID</th>\n//             <th>Task Name</th>\n//             <th>Status</th>\n//             <th>Created At</th>\n//             <th>Action</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {tasks.map((task) => (\n//             <tr key={task.id}>\n//               <td>{task.id}</td>\n//               <td>{task.name}</td>\n//               <td>{task.status}</td>\n//               <td>{task.createdAt}</td>\n//               <td>\n//                 <FaEdit\n//                   onClick={() => handleEdit(task)} // Open Edit modal\n//                   className=\"edit-icon\"\n//                 />\n//                 <FaTrash\n//                   onClick={() => handleDelete(task.id)} // Delete the task\n//                   className=\"delete-icon\"\n//                 />\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n\n//       {/* Add/Edit Task Modal */}\n//       <TaskModal\n//         isOpen={isModalOpen}\n//         onClose={() => setModalOpen(false)}\n//         onTaskAdded={handleTaskAdded}\n//         taskToEdit={taskToEdit} // Pass the task data to the modal if we are editing\n//       />\n//     </div>\n//   );\n// };\n\n// export default TaskList;\n\nimport React, { useEffect, useState } from \"react\";\nimport { getTasks, deleteTask } from \"../api\"; // Importing API functions\nimport { FaTrash } from \"react-icons/fa\"; // Delete icon\nimport \"./TaskList.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskList = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  // Fetch tasks from the backend\n  const fetchTasks = async () => {\n    setLoading(true); // Show loading spinner\n    try {\n      const taskList = await getTasks(); // API call to fetch tasks\n      setTasks(taskList);\n    } catch (error) {\n      console.error(\"Error fetching tasks:\", error);\n    } finally {\n      setLoading(false); // Hide loading spinner\n    }\n  };\n\n  // Handle task deletion\n  const handleDelete = async taskId => {\n    try {\n      await deleteTask(taskId); // Delete task via API\n      setTasks(prevTasks => prevTasks.filter(task => task.id !== taskId)); // Update UI\n    } catch (error) {\n      console.error(\"Error deleting task:\", error);\n    }\n  };\n  useEffect(() => {\n    fetchTasks(); // Load tasks on component mount\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"task-list-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Task Management Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading tasks...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }, this) : tasks.length > 0 ? /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"task-table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Task ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Task Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Created At\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Action\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: tasks.map(task => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: task.id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: task.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: task.status\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: task.createdAt\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(FaTrash, {\n              onClick: () => handleDelete(task.id) // Delete action\n              ,\n              className: \"delete-icon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 17\n          }, this)]\n        }, task.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No tasks available. Please add a task.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskList, \"Pagxvp8rtPw6MBgF7eSYjucQaJI=\");\n_c = TaskList;\nexport default TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["React","useEffect","useState","getTasks","deleteTask","FaTrash","jsxDEV","_jsxDEV","TaskList","_s","tasks","setTasks","loading","setLoading","fetchTasks","taskList","error","console","handleDelete","taskId","prevTasks","filter","task","id","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","name","status","createdAt","onClick","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Desktop/ReactForm/realtime-app/frontend/src/componets/TaskList.js"],"sourcesContent":["\r\n\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n// import { getTasks, deleteTask, updateTaskStatus } from \"../api\"; // Assuming you have these functions in api.js\r\n// import { FaEdit, FaTrash } from \"react-icons/fa\"; // Using react-icons for Edit and Delete icons\r\n// import TaskModal from \"./TaskModal\";\r\n// import \"./TaskList.css\"; // Ensure the CSS is imported for styling\r\n\r\n// const TaskList = () => {\r\n//   const [tasks, setTasks] = useState([]);\r\n//   const [isModalOpen, setModalOpen] = useState(false);\r\n//   const [taskToEdit, setTaskToEdit] = useState(null);\r\n\r\n//   // Fetch tasks from the backend\r\n//   const fetchTasks = async () => {\r\n//     try {\r\n//       const taskList = await getTasks(); // Replace with actual API call\r\n//       setTasks(taskList);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching tasks:\", error);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetchTasks(); // Load tasks on page load\r\n//   }, []);\r\n\r\n//   // Show the Add Task modal\r\n//   const handleAddTask = () => {\r\n//     setTaskToEdit(null); // Clear any task that might be in edit mode\r\n//     setModalOpen(true);\r\n//   };\r\n\r\n//   // Handle task addition\r\n//   const handleTaskAdded = (newTask) => {\r\n//     setTasks((prevTasks) => [...prevTasks, newTask]); // Add new task to the list\r\n//   };\r\n\r\n//   // Handle Edit action\r\n//   const handleEdit = (task) => {\r\n//     setTaskToEdit(task); // Set the task that we want to edit\r\n//     setModalOpen(true); // Open the modal to edit the task\r\n//   };\r\n\r\n//   // Handle Delete action\r\n//   const handleDelete = async (taskId) => {\r\n//     try {\r\n//       await deleteTask(taskId); // Send delete request to API\r\n//       setTasks(tasks.filter((task) => task.id !== taskId)); // Remove deleted task from UI\r\n//     } catch (error) {\r\n//       console.error(\"Error deleting task:\", error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"task-list-container\">\r\n//       <h1>Real-Time Task Management Dashboard</h1>\r\n//       <button onClick={handleAddTask} className=\"add-task-btn\">Add Task</button>\r\n\r\n//       <table className=\"task-table\">\r\n//         <thead>\r\n//           <tr>\r\n//             <th>Task ID</th>\r\n//             <th>Task Name</th>\r\n//             <th>Status</th>\r\n//             <th>Created At</th>\r\n//             <th>Action</th>\r\n//           </tr>\r\n//         </thead>\r\n//         <tbody>\r\n//           {tasks.map((task) => (\r\n//             <tr key={task.id}>\r\n//               <td>{task.id}</td>\r\n//               <td>{task.name}</td>\r\n//               <td>{task.status}</td>\r\n//               <td>{task.createdAt}</td>\r\n//               <td>\r\n//                 <FaEdit\r\n//                   onClick={() => handleEdit(task)} // Open Edit modal\r\n//                   className=\"edit-icon\"\r\n//                 />\r\n//                 <FaTrash\r\n//                   onClick={() => handleDelete(task.id)} // Delete the task\r\n//                   className=\"delete-icon\"\r\n//                 />\r\n//               </td>\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </table>\r\n\r\n//       {/* Add/Edit Task Modal */}\r\n//       <TaskModal\r\n//         isOpen={isModalOpen}\r\n//         onClose={() => setModalOpen(false)}\r\n//         onTaskAdded={handleTaskAdded}\r\n//         taskToEdit={taskToEdit} // Pass the task data to the modal if we are editing\r\n//       />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default TaskList;\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { getTasks, deleteTask } from \"../api\"; // Importing API functions\r\nimport { FaTrash } from \"react-icons/fa\"; // Delete icon\r\nimport \"./TaskList.css\";\r\n\r\nconst TaskList = () => {\r\n  const [tasks, setTasks] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // Fetch tasks from the backend\r\n  const fetchTasks = async () => {\r\n    setLoading(true); // Show loading spinner\r\n    try {\r\n      const taskList = await getTasks(); // API call to fetch tasks\r\n      setTasks(taskList);\r\n    } catch (error) {\r\n      console.error(\"Error fetching tasks:\", error);\r\n    } finally {\r\n      setLoading(false); // Hide loading spinner\r\n    }\r\n  };\r\n\r\n  // Handle task deletion\r\n  const handleDelete = async (taskId) => {\r\n    try {\r\n      await deleteTask(taskId); // Delete task via API\r\n      setTasks((prevTasks) => prevTasks.filter((task) => task.id !== taskId)); // Update UI\r\n    } catch (error) {\r\n      console.error(\"Error deleting task:\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchTasks(); // Load tasks on component mount\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"task-list-container\">\r\n      <h1>Task Management Dashboard</h1>\r\n\r\n      {loading ? (\r\n        <p>Loading tasks...</p>\r\n      ) : tasks.length > 0 ? (\r\n        <table className=\"task-table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Task ID</th>\r\n              <th>Task Name</th>\r\n              <th>Status</th>\r\n              <th>Created At</th>\r\n              <th>Action</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {tasks.map((task) => (\r\n              <tr key={task.id}>\r\n                <td>{task.id}</td>\r\n                <td>{task.name}</td>\r\n                <td>{task.status}</td>\r\n                <td>{task.createdAt}</td>\r\n                <td>\r\n                  <FaTrash\r\n                    onClick={() => handleDelete(task.id)} // Delete action\r\n                    className=\"delete-icon\"\r\n                  />\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      ) : (\r\n        <p>No tasks available. Please add a task.</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskList;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}