{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\ReactForm\\\\realtime-app\\\\frontend\\\\src\\\\componets\\\\TaskModal.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import { addTask } from \"../api\"; // Replace with your API call\n// import './TaskModal.css';\n// const TaskModal = ({ isOpen, onClose, onTaskAdded }) => {\n//   const [taskData, setTaskData] = useState({ name: \"\", status: \"Pending\" });\n//   const [loading, setLoading] = useState(false);\n//   const [message, setMessage] = useState(\"\");\n\n//   // Handle input changes for Task Name and Status\n//   const handleChange = (e) => {\n//     setTaskData({\n//       ...taskData,\n//       [e.target.name]: e.target.value,\n//     });\n//   };\n\n//   // Handle form submission to add the task\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     // Validate the form\n//     if (!taskData.name.trim()) {\n//       setMessage(\"Task name cannot be empty.\");\n//       return;\n//     }\n\n//     setLoading(true);\n//     setMessage(\"\"); // Reset message\n\n//     try {\n//       const result = await addTask(taskData); // Add task through API\n//       setMessage(\"Task added successfully!\");\n//       onTaskAdded(result); // Notify parent component to refresh task list\n//       setTaskData({ name: \"\", status: \"Pending\" }); // Reset form\n//     } catch (error) {\n//       setMessage(\"Error saving task: \" + error.message);\n//     } finally {\n//       setLoading(false); // Stop loading state\n//     }\n//   };\n\n//   // If the modal is not open, return null (don't render anything)\n//   if (!isOpen) return null;\n\n//   return (\n//     <div className=\"modal\">\n//       <div className=\"modal-content\">\n//         <h2>Add Task</h2>\n//         {message && <div className=\"message\">{message}</div>}\n\n//         <form onSubmit={handleSubmit}>\n//           <input\n//             type=\"text\"\n//             name=\"name\"\n//             placeholder=\"Enter Task Name\"\n//             value={taskData.name}\n//             onChange={handleChange}\n//           />\n//           <select name=\"status\" value={taskData.status} onChange={handleChange}>\n//             <option value=\"Pending\">Pending</option>\n//             <option value=\"In Progress\">In Progress</option>\n//             <option value=\"Completed\">Completed</option>\n//           </select>\n//           <button type=\"submit\" disabled={loading} className=\"submit-task-btn\">\n//             {loading ? \"Save...\" : \"Save\"}\n//           </button>\n//         </form>\n//         <button onClick={onClose} className=\"close-modal-btn\">\n//           Cancel\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default TaskModal;\n\nimport React, { useState } from \"react\";\nimport { addTask } from \"../api\"; // API to add new task\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskModal = ({\n  isOpen,\n  onClose,\n  onTaskAdded\n}) => {\n  _s();\n  const [name, setName] = useState(\"\");\n  const [status, setStatus] = useState(\"Pending\");\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const newTask = await addTask({\n        name,\n        status\n      });\n      onTaskAdded(newTask); // Update parent component with new task\n      onClose(); // Close modal\n    } catch (error) {\n      console.error(\"Error adding task:\", error);\n    }\n  };\n  if (!isOpen) return null; // Don't render if not open\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"task-modal-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Add New Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Task Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: name,\n          onChange: e => setName(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Status\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: status,\n          onChange: e => setStatus(e.target.value),\n          required: true,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Pending\",\n            children: \"Pending\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"In Progress\",\n            children: \"In Progress\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Completed\",\n            children: \"Completed\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: onClose,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskModal, \"7OV0ojw+MNsorPT5HamYOWvAfZw=\");\n_c = TaskModal;\nexport default TaskModal;\nvar _c;\n$RefreshReg$(_c, \"TaskModal\");","map":{"version":3,"names":["React","useState","addTask","jsxDEV","_jsxDEV","TaskModal","isOpen","onClose","onTaskAdded","_s","name","setName","status","setStatus","handleSubmit","e","preventDefault","newTask","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","required","onClick","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Desktop/ReactForm/realtime-app/frontend/src/componets/TaskModal.js"],"sourcesContent":["// import React, { useState } from \"react\";\r\n// import { addTask } from \"../api\"; // Replace with your API call\r\n// import './TaskModal.css';\r\n// const TaskModal = ({ isOpen, onClose, onTaskAdded }) => {\r\n//   const [taskData, setTaskData] = useState({ name: \"\", status: \"Pending\" });\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [message, setMessage] = useState(\"\");\r\n\r\n//   // Handle input changes for Task Name and Status\r\n//   const handleChange = (e) => {\r\n//     setTaskData({\r\n//       ...taskData,\r\n//       [e.target.name]: e.target.value,\r\n//     });\r\n//   };\r\n\r\n//   // Handle form submission to add the task\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n\r\n//     // Validate the form\r\n//     if (!taskData.name.trim()) {\r\n//       setMessage(\"Task name cannot be empty.\");\r\n//       return;\r\n//     }\r\n\r\n//     setLoading(true);\r\n//     setMessage(\"\"); // Reset message\r\n\r\n//     try {\r\n//       const result = await addTask(taskData); // Add task through API\r\n//       setMessage(\"Task added successfully!\");\r\n//       onTaskAdded(result); // Notify parent component to refresh task list\r\n//       setTaskData({ name: \"\", status: \"Pending\" }); // Reset form\r\n//     } catch (error) {\r\n//       setMessage(\"Error saving task: \" + error.message);\r\n//     } finally {\r\n//       setLoading(false); // Stop loading state\r\n//     }\r\n//   };\r\n\r\n//   // If the modal is not open, return null (don't render anything)\r\n//   if (!isOpen) return null;\r\n\r\n//   return (\r\n//     <div className=\"modal\">\r\n//       <div className=\"modal-content\">\r\n//         <h2>Add Task</h2>\r\n//         {message && <div className=\"message\">{message}</div>}\r\n\r\n//         <form onSubmit={handleSubmit}>\r\n//           <input\r\n//             type=\"text\"\r\n//             name=\"name\"\r\n//             placeholder=\"Enter Task Name\"\r\n//             value={taskData.name}\r\n//             onChange={handleChange}\r\n//           />\r\n//           <select name=\"status\" value={taskData.status} onChange={handleChange}>\r\n//             <option value=\"Pending\">Pending</option>\r\n//             <option value=\"In Progress\">In Progress</option>\r\n//             <option value=\"Completed\">Completed</option>\r\n//           </select>\r\n//           <button type=\"submit\" disabled={loading} className=\"submit-task-btn\">\r\n//             {loading ? \"Save...\" : \"Save\"}\r\n//           </button>\r\n//         </form>\r\n//         <button onClick={onClose} className=\"close-modal-btn\">\r\n//           Cancel\r\n//         </button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default TaskModal;\r\n\r\n\r\n\r\nimport React, { useState } from \"react\";\r\nimport { addTask } from \"../api\"; // API to add new task\r\n\r\nconst TaskModal = ({ isOpen, onClose, onTaskAdded }) => {\r\n  const [name, setName] = useState(\"\");\r\n  const [status, setStatus] = useState(\"Pending\");\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    try {\r\n      const newTask = await addTask({ name, status });\r\n      onTaskAdded(newTask); // Update parent component with new task\r\n      onClose(); // Close modal\r\n    } catch (error) {\r\n      console.error(\"Error adding task:\", error);\r\n    }\r\n  };\r\n\r\n  if (!isOpen) return null; // Don't render if not open\r\n\r\n  return (\r\n    <div className=\"task-modal-container\">\r\n      <h2>Add New Task</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <div>\r\n          <label>Task Name</label>\r\n          <input\r\n            type=\"text\"\r\n            value={name}\r\n            onChange={(e) => setName(e.target.value)}\r\n            required\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Status</label>\r\n          <select\r\n            value={status}\r\n            onChange={(e) => setStatus(e.target.value)}\r\n            required\r\n          >\r\n            <option value=\"Pending\">Pending</option>\r\n            <option value=\"In Progress\">In Progress</option>\r\n            <option value=\"Completed\">Completed</option>\r\n          </select>\r\n        </div>\r\n        <button type=\"submit\">Add Task</button>\r\n        <button type=\"button\" onClick={onClose}>Cancel</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskModal;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}