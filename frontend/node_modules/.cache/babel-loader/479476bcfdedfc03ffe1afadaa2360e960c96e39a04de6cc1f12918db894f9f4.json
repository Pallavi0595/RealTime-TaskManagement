{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\ReactForm\\\\realtime-app\\\\frontend\\\\src\\\\componets\\\\TaskModal.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import { addTask } from \"../api\"; // Replace with your API call\n// import './TaskModal.css';\n// const TaskModal = ({ isOpen, onClose, onTaskAdded }) => {\n//   const [taskData, setTaskData] = useState({ name: \"\", status: \"Pending\" });\n//   const [loading, setLoading] = useState(false);\n//   const [message, setMessage] = useState(\"\");\n\n//   // Handle input changes for Task Name and Status\n//   const handleChange = (e) => {\n//     setTaskData({\n//       ...taskData,\n//       [e.target.name]: e.target.value,\n//     });\n//   };\n\n//   // Handle form submission to add the task\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     // Validate the form\n//     if (!taskData.name.trim()) {\n//       setMessage(\"Task name cannot be empty.\");\n//       return;\n//     }\n\n//     setLoading(true);\n//     setMessage(\"\"); // Reset message\n\n//     try {\n//       const result = await addTask(taskData); // Add task through API\n//       setMessage(\"Task added successfully!\");\n//       onTaskAdded(result); // Notify parent component to refresh task list\n//       setTaskData({ name: \"\", status: \"Pending\" }); // Reset form\n//     } catch (error) {\n//       setMessage(\"Error saving task: \" + error.message);\n//     } finally {\n//       setLoading(false); // Stop loading state\n//     }\n//   };\n\n//   // If the modal is not open, return null (don't render anything)\n//   if (!isOpen) return null;\n\n//   return (\n//     <div className=\"modal\">\n//       <div className=\"modal-content\">\n//         <h2>Add Task</h2>\n//         {message && <div className=\"message\">{message}</div>}\n\n//         <form onSubmit={handleSubmit}>\n//           <input\n//             type=\"text\"\n//             name=\"name\"\n//             placeholder=\"Enter Task Name\"\n//             value={taskData.name}\n//             onChange={handleChange}\n//           />\n//           <select name=\"status\" value={taskData.status} onChange={handleChange}>\n//             <option value=\"Pending\">Pending</option>\n//             <option value=\"In Progress\">In Progress</option>\n//             <option value=\"Completed\">Completed</option>\n//           </select>\n//           <button type=\"submit\" disabled={loading} className=\"submit-task-btn\">\n//             {loading ? \"Submitting...\" : \"Save\"}\n//           </button>\n//         </form>\n//         <button onClick={onClose} className=\"close-modal-btn\">\n//           Cancel\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default TaskModal;\n\n// TaskModal.js\nimport React, { useState, useEffect } from \"react\";\nimport { addTask, updateTask } from \"../api\"; // Assuming addTask and updateTask API methods\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskModal = ({\n  isOpen,\n  onClose,\n  onTaskUpdated,\n  task\n}) => {\n  _s();\n  const [taskData, setTaskData] = useState({\n    name: \"\",\n    status: \"Pending\"\n  });\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState(\"\");\n\n  // Set task data if editing an existing task\n  useEffect(() => {\n    if (task) {\n      setTaskData({\n        name: task.name,\n        status: task.status\n      });\n    } else {\n      setTaskData({\n        name: \"\",\n        status: \"Pending\"\n      });\n    }\n  }, [task]);\n  const handleChange = e => {\n    setTaskData({\n      ...taskData,\n      [e.target.name]: e.target.value\n    });\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!taskData.name.trim()) {\n      setMessage(\"Task name cannot be empty.\");\n      return;\n    }\n    setLoading(true);\n    setMessage(\"\");\n    try {\n      if (task) {\n        // Update existing task\n        const updatedTask = await updateTask(task.id, taskData);\n        onTaskUpdated(updatedTask);\n        setMessage(\"Task updated successfully!\");\n      } else {\n        // Add new task\n        const newTask = await addTask(taskData);\n        onTaskUpdated(newTask);\n        setMessage(\"Task added successfully!\");\n      }\n      setTaskData({\n        name: \"\",\n        status: \"Pending\"\n      });\n    } catch (error) {\n      setMessage(\"Error saving task: \" + error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  if (!isOpen) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modal\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: task ? \"Edit Task\" : \"Add Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"name\",\n          placeholder: \"Enter Task Name\",\n          value: taskData.name,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          name: \"status\",\n          value: taskData.status,\n          onChange: handleChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Pending\",\n            children: \"Pending\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"In Progress\",\n            children: \"In Progress\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Completed\",\n            children: \"Completed\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          disabled: loading,\n          children: loading ? \"Submitting...\" : task ? \"Update\" : \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onClose,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskModal, \"l9Her97n5kPVJc3cHoIBaM8FunM=\");\n_c = TaskModal;\nexport default TaskModal;\nvar _c;\n$RefreshReg$(_c, \"TaskModal\");","map":{"version":3,"names":["React","useState","useEffect","addTask","updateTask","jsxDEV","_jsxDEV","TaskModal","isOpen","onClose","onTaskUpdated","task","_s","taskData","setTaskData","name","status","loading","setLoading","message","setMessage","handleChange","e","target","value","handleSubmit","preventDefault","trim","updatedTask","id","newTask","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","onChange","disabled","onClick","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Desktop/ReactForm/realtime-app/frontend/src/componets/TaskModal.js"],"sourcesContent":["// import React, { useState } from \"react\";\r\n// import { addTask } from \"../api\"; // Replace with your API call\r\n// import './TaskModal.css';\r\n// const TaskModal = ({ isOpen, onClose, onTaskAdded }) => {\r\n//   const [taskData, setTaskData] = useState({ name: \"\", status: \"Pending\" });\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [message, setMessage] = useState(\"\");\r\n\r\n//   // Handle input changes for Task Name and Status\r\n//   const handleChange = (e) => {\r\n//     setTaskData({\r\n//       ...taskData,\r\n//       [e.target.name]: e.target.value,\r\n//     });\r\n//   };\r\n\r\n//   // Handle form submission to add the task\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n\r\n//     // Validate the form\r\n//     if (!taskData.name.trim()) {\r\n//       setMessage(\"Task name cannot be empty.\");\r\n//       return;\r\n//     }\r\n\r\n//     setLoading(true);\r\n//     setMessage(\"\"); // Reset message\r\n\r\n//     try {\r\n//       const result = await addTask(taskData); // Add task through API\r\n//       setMessage(\"Task added successfully!\");\r\n//       onTaskAdded(result); // Notify parent component to refresh task list\r\n//       setTaskData({ name: \"\", status: \"Pending\" }); // Reset form\r\n//     } catch (error) {\r\n//       setMessage(\"Error saving task: \" + error.message);\r\n//     } finally {\r\n//       setLoading(false); // Stop loading state\r\n//     }\r\n//   };\r\n\r\n//   // If the modal is not open, return null (don't render anything)\r\n//   if (!isOpen) return null;\r\n\r\n//   return (\r\n//     <div className=\"modal\">\r\n//       <div className=\"modal-content\">\r\n//         <h2>Add Task</h2>\r\n//         {message && <div className=\"message\">{message}</div>}\r\n\r\n//         <form onSubmit={handleSubmit}>\r\n//           <input\r\n//             type=\"text\"\r\n//             name=\"name\"\r\n//             placeholder=\"Enter Task Name\"\r\n//             value={taskData.name}\r\n//             onChange={handleChange}\r\n//           />\r\n//           <select name=\"status\" value={taskData.status} onChange={handleChange}>\r\n//             <option value=\"Pending\">Pending</option>\r\n//             <option value=\"In Progress\">In Progress</option>\r\n//             <option value=\"Completed\">Completed</option>\r\n//           </select>\r\n//           <button type=\"submit\" disabled={loading} className=\"submit-task-btn\">\r\n//             {loading ? \"Submitting...\" : \"Save\"}\r\n//           </button>\r\n//         </form>\r\n//         <button onClick={onClose} className=\"close-modal-btn\">\r\n//           Cancel\r\n//         </button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default TaskModal;\r\n\r\n\r\n\r\n// TaskModal.js\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { addTask, updateTask } from \"../api\"; // Assuming addTask and updateTask API methods\r\n\r\nconst TaskModal = ({ isOpen, onClose, onTaskUpdated, task }) => {\r\n  const [taskData, setTaskData] = useState({ name: \"\", status: \"Pending\" });\r\n  const [loading, setLoading] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  // Set task data if editing an existing task\r\n  useEffect(() => {\r\n    if (task) {\r\n      setTaskData({ name: task.name, status: task.status });\r\n    } else {\r\n      setTaskData({ name: \"\", status: \"Pending\" });\r\n    }\r\n  }, [task]);\r\n\r\n  const handleChange = (e) => {\r\n    setTaskData({\r\n      ...taskData,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!taskData.name.trim()) {\r\n      setMessage(\"Task name cannot be empty.\");\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    setMessage(\"\");\r\n\r\n    try {\r\n      if (task) {\r\n        // Update existing task\r\n        const updatedTask = await updateTask(task.id, taskData);\r\n        onTaskUpdated(updatedTask);\r\n        setMessage(\"Task updated successfully!\");\r\n      } else {\r\n        // Add new task\r\n        const newTask = await addTask(taskData);\r\n        onTaskUpdated(newTask);\r\n        setMessage(\"Task added successfully!\");\r\n      }\r\n\r\n      setTaskData({ name: \"\", status: \"Pending\" });\r\n    } catch (error) {\r\n      setMessage(\"Error saving task: \" + error.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <div className=\"modal\">\r\n      <div className=\"modal-content\">\r\n        <h2>{task ? \"Edit Task\" : \"Add Task\"}</h2>\r\n        {message && <div>{message}</div>}\r\n\r\n        <form onSubmit={handleSubmit}>\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            placeholder=\"Enter Task Name\"\r\n            value={taskData.name}\r\n            onChange={handleChange}\r\n          />\r\n          <select name=\"status\" value={taskData.status} onChange={handleChange}>\r\n            <option value=\"Pending\">Pending</option>\r\n            <option value=\"In Progress\">In Progress</option>\r\n            <option value=\"Completed\">Completed</option>\r\n          </select>\r\n          <button type=\"submit\" disabled={loading}>\r\n            {loading ? \"Submitting...\" : task ? \"Update\" : \"Submit\"}\r\n          </button>\r\n        </form>\r\n        <button onClick={onClose}>Close</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskModal;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}