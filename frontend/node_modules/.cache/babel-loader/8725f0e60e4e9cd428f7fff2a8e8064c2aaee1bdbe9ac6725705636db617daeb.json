{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\ReactForm\\\\realtime-app\\\\frontend\\\\src\\\\componets\\\\TaskList.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// import { getTasks, deleteTask, updateTaskStatus } from \"../api\"; // Assuming you have these functions in api.js\n// import { FaEdit, FaTrash } from \"react-icons/fa\"; // Using react-icons for Edit and Delete icons\n// import TaskModal from \"./TaskModal\";\n// import \"./TaskList.css\"; // Ensure the CSS is imported for styling\n\n// const TaskList = () => {\n//   const [tasks, setTasks] = useState([]);\n//   const [isModalOpen, setModalOpen] = useState(false);\n//   const [taskToEdit, setTaskToEdit] = useState(null);\n\n//   // Fetch tasks from the backend\n//   const fetchTasks = async () => {\n//     try {\n//       const taskList = await getTasks(); // Replace with actual API call\n//       setTasks(taskList);\n//     } catch (error) {\n//       console.error(\"Error fetching tasks:\", error);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchTasks(); // Load tasks on page load\n//   }, []);\n\n//   // Show the Add Task modal\n//   const handleAddTask = () => {\n//     setTaskToEdit(null); // Clear any task that might be in edit mode\n//     setModalOpen(true);\n//   };\n\n//   // Handle task addition\n//   const handleTaskAdded = (newTask) => {\n//     setTasks((prevTasks) => [...prevTasks, newTask]); // Add new task to the list\n//   };\n\n//   // Handle Edit action\n//   const handleEdit = (task) => {\n//     setTaskToEdit(task); // Set the task that we want to edit\n//     setModalOpen(true); // Open the modal to edit the task\n//   };\n\n//   // Handle Delete action\n//   const handleDelete = async (taskId) => {\n//     try {\n//       await deleteTask(taskId); // Send delete request to API\n//       setTasks(tasks.filter((task) => task.id !== taskId)); // Remove deleted task from UI\n//     } catch (error) {\n//       console.error(\"Error deleting task:\", error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"task-list-container\">\n//       <h1>Real-Time Task Management Dashboard</h1>\n//       <button onClick={handleAddTask} className=\"add-task-btn\">Add Task</button>\n\n//       <table className=\"task-table\">\n//         <thead>\n//           <tr>\n//             <th>Task ID</th>\n//             <th>Task Name</th>\n//             <th>Status</th>\n//             <th>Created At</th>\n//             <th>Action</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {tasks.map((task) => (\n//             <tr key={task.id}>\n//               <td>{task.id}</td>\n//               <td>{task.name}</td>\n//               <td>{task.status}</td>\n//               <td>{task.createdAt}</td>\n//               <td>\n//                 <FaEdit\n//                   onClick={() => handleEdit(task)} // Open Edit modal\n//                   className=\"edit-icon\"\n//                 />\n//                 <FaTrash\n//                   onClick={() => handleDelete(task.id)} // Delete the task\n//                   className=\"delete-icon\"\n//                 />\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n\n//       {/* Add/Edit Task Modal */}\n//       <TaskModal\n//         isOpen={isModalOpen}\n//         onClose={() => setModalOpen(false)}\n//         onTaskAdded={handleTaskAdded}\n//         taskToEdit={taskToEdit} // Pass the task data to the modal if we are editing\n//       />\n//     </div>\n//   );\n// };\n\n// export default TaskList;\n\nimport React, { useEffect, useState } from \"react\";\nimport { getTasks, deleteTask } from \"../api\"; // Import deleteTask API\nimport TaskModal from \"./TaskModal\";\nimport \"./TaskList.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskList = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [isModalOpen, setModalOpen] = useState(false);\n\n  // Fetch tasks from the backend\n  const fetchTasks = async () => {\n    try {\n      const taskList = await getTasks();\n      setTasks(taskList);\n    } catch (error) {\n      console.error(\"Error fetching tasks:\", error);\n    }\n  };\n  useEffect(() => {\n    fetchTasks(); // Load tasks on page load\n  }, []);\n\n  // Handle task deletion\n  const handleDeleteTask = async taskId => {\n    if (window.confirm(\"Are you sure you want to delete this task?\")) {\n      try {\n        await deleteTask(taskId); // Call the API to delete the task\n        setTasks(prevTasks => prevTasks.filter(task => task.id !== taskId)); // Remove task from state\n      } catch (error) {\n        console.error(\"Error deleting task:\", error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"task-list-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Real-Time Task Management Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setModalOpen(true),\n      className: \"add-task-btn\",\n      children: \"Add Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"task-table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Task ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Task Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Created At\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Action\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: tasks.map(task => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: task.id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: task.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: task.status\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: task.createdAt\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"delete-btn\",\n              onClick: () => handleDeleteTask(task.id),\n              children: \"\\uD83D\\uDDD1\\uFE0F\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 15\n          }, this)]\n        }, task.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TaskModal, {\n      isOpen: isModalOpen,\n      onClose: () => setModalOpen(false),\n      onTaskAdded: newTask => setTasks(prevTasks => [...prevTasks, newTask])\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskList, \"2nQWa3LGTo++ud9570IV90SOPko=\");\n_c = TaskList;\nexport default TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["React","useEffect","useState","getTasks","deleteTask","TaskModal","jsxDEV","_jsxDEV","TaskList","_s","tasks","setTasks","isModalOpen","setModalOpen","fetchTasks","taskList","error","console","handleDeleteTask","taskId","window","confirm","prevTasks","filter","task","id","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","name","status","createdAt","isOpen","onClose","onTaskAdded","newTask","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Desktop/ReactForm/realtime-app/frontend/src/componets/TaskList.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n// import { getTasks, deleteTask, updateTaskStatus } from \"../api\"; // Assuming you have these functions in api.js\r\n// import { FaEdit, FaTrash } from \"react-icons/fa\"; // Using react-icons for Edit and Delete icons\r\n// import TaskModal from \"./TaskModal\";\r\n// import \"./TaskList.css\"; // Ensure the CSS is imported for styling\r\n\r\n// const TaskList = () => {\r\n//   const [tasks, setTasks] = useState([]);\r\n//   const [isModalOpen, setModalOpen] = useState(false);\r\n//   const [taskToEdit, setTaskToEdit] = useState(null);\r\n\r\n//   // Fetch tasks from the backend\r\n//   const fetchTasks = async () => {\r\n//     try {\r\n//       const taskList = await getTasks(); // Replace with actual API call\r\n//       setTasks(taskList);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching tasks:\", error);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetchTasks(); // Load tasks on page load\r\n//   }, []);\r\n\r\n//   // Show the Add Task modal\r\n//   const handleAddTask = () => {\r\n//     setTaskToEdit(null); // Clear any task that might be in edit mode\r\n//     setModalOpen(true);\r\n//   };\r\n\r\n//   // Handle task addition\r\n//   const handleTaskAdded = (newTask) => {\r\n//     setTasks((prevTasks) => [...prevTasks, newTask]); // Add new task to the list\r\n//   };\r\n\r\n//   // Handle Edit action\r\n//   const handleEdit = (task) => {\r\n//     setTaskToEdit(task); // Set the task that we want to edit\r\n//     setModalOpen(true); // Open the modal to edit the task\r\n//   };\r\n\r\n//   // Handle Delete action\r\n//   const handleDelete = async (taskId) => {\r\n//     try {\r\n//       await deleteTask(taskId); // Send delete request to API\r\n//       setTasks(tasks.filter((task) => task.id !== taskId)); // Remove deleted task from UI\r\n//     } catch (error) {\r\n//       console.error(\"Error deleting task:\", error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"task-list-container\">\r\n//       <h1>Real-Time Task Management Dashboard</h1>\r\n//       <button onClick={handleAddTask} className=\"add-task-btn\">Add Task</button>\r\n\r\n//       <table className=\"task-table\">\r\n//         <thead>\r\n//           <tr>\r\n//             <th>Task ID</th>\r\n//             <th>Task Name</th>\r\n//             <th>Status</th>\r\n//             <th>Created At</th>\r\n//             <th>Action</th>\r\n//           </tr>\r\n//         </thead>\r\n//         <tbody>\r\n//           {tasks.map((task) => (\r\n//             <tr key={task.id}>\r\n//               <td>{task.id}</td>\r\n//               <td>{task.name}</td>\r\n//               <td>{task.status}</td>\r\n//               <td>{task.createdAt}</td>\r\n//               <td>\r\n//                 <FaEdit\r\n//                   onClick={() => handleEdit(task)} // Open Edit modal\r\n//                   className=\"edit-icon\"\r\n//                 />\r\n//                 <FaTrash\r\n//                   onClick={() => handleDelete(task.id)} // Delete the task\r\n//                   className=\"delete-icon\"\r\n//                 />\r\n//               </td>\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </table>\r\n\r\n//       {/* Add/Edit Task Modal */}\r\n//       <TaskModal\r\n//         isOpen={isModalOpen}\r\n//         onClose={() => setModalOpen(false)}\r\n//         onTaskAdded={handleTaskAdded}\r\n//         taskToEdit={taskToEdit} // Pass the task data to the modal if we are editing\r\n//       />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default TaskList;\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { getTasks, deleteTask } from \"../api\"; // Import deleteTask API\r\nimport TaskModal from \"./TaskModal\";\r\nimport \"./TaskList.css\";\r\n\r\nconst TaskList = () => {\r\n  const [tasks, setTasks] = useState([]);\r\n  const [isModalOpen, setModalOpen] = useState(false);\r\n\r\n  // Fetch tasks from the backend\r\n  const fetchTasks = async () => {\r\n    try {\r\n      const taskList = await getTasks();\r\n      setTasks(taskList);\r\n    } catch (error) {\r\n      console.error(\"Error fetching tasks:\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchTasks(); // Load tasks on page load\r\n  }, []);\r\n\r\n  // Handle task deletion\r\n  const handleDeleteTask = async (taskId) => {\r\n    if (window.confirm(\"Are you sure you want to delete this task?\")) {\r\n      try {\r\n        await deleteTask(taskId); // Call the API to delete the task\r\n        setTasks((prevTasks) => prevTasks.filter((task) => task.id !== taskId)); // Remove task from state\r\n      } catch (error) {\r\n        console.error(\"Error deleting task:\", error);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"task-list-container\">\r\n      <h1>Real-Time Task Management Dashboard</h1>\r\n      <button onClick={() => setModalOpen(true)} className=\"add-task-btn\">\r\n        Add Task\r\n      </button>\r\n\r\n      <table className=\"task-table\">\r\n        <thead>\r\n          <tr>\r\n            <th>Task ID</th>\r\n            <th>Task Name</th>\r\n            <th>Status</th>\r\n            <th>Created At</th>\r\n            <th>Action</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {tasks.map((task) => (\r\n            <tr key={task.id}>\r\n              <td>{task.id}</td>\r\n              <td>{task.name}</td>\r\n              <td>{task.status}</td>\r\n              <td>{task.createdAt}</td>\r\n              <td>\r\n                <button\r\n                  className=\"delete-btn\"\r\n                  onClick={() => handleDeleteTask(task.id)}\r\n                >\r\n                  🗑️\r\n                </button>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n\r\n      {/* Add Task Modal */}\r\n      <TaskModal\r\n        isOpen={isModalOpen}\r\n        onClose={() => setModalOpen(false)}\r\n        onTaskAdded={(newTask) =>\r\n          setTasks((prevTasks) => [...prevTasks, newTask])\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}