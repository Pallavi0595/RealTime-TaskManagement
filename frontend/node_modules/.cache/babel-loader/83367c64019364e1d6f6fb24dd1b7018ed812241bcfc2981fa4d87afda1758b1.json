{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\ReactForm\\\\realtime-app\\\\frontend\\\\src\\\\componets\\\\TaskList.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// import { getTasks, deleteTask, updateTaskStatus, addTask } from \"../api\"; // Import API utilities\n// import TaskModal from \"./TaskModal\";\n// import EditTaskModal from \"./EditTaskModal\"; \n// import \"./TaskList.css\";\n// import { FaTrashAlt } from \"react-icons/fa\"; \n\n// const TaskList = () => {\n//   const [tasks, setTasks] = useState([]);\n//   const [isModalOpen, setModalOpen] = useState(false);\n//   const [isEditModalOpen, setEditModalOpen] = useState(false);\n//   const [selectedTask, setSelectedTask] = useState(null);\n\n//   // Fetch tasks from the backend\n//   const fetchTasks = async () => {\n//     try {\n//       const taskList = await getTasks();\n//       setTasks(taskList);\n//     } catch (error) {\n//       console.error(\"Error fetching tasks:\", error);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchTasks();\n//   }, []);\n\n//   // Show the Add Task modal\n//   const handleAddTask = () => setModalOpen(true);\n\n//   // Handle task addition\n//   const handleTaskAdded = async (newTask) => {\n//     try {\n//       const addedTask = await addTask(newTask);\n//       setTasks((prevTasks) => [...prevTasks, addedTask]);\n//     } catch (error) {\n//       console.error(\"Error adding task:\", error);\n//     }\n//   };\n\n//   // Handle Edit icon click\n//   const handleEditClick = (task) => {\n//     setSelectedTask(task);\n//     setEditModalOpen(true);\n//   };\n\n//   // Handle task update\n//   const handleTaskUpdated = async (updatedTask) => {\n//     try {\n//       await updateTaskStatus(updatedTask.id, updatedTask);\n//       setTasks((prevTasks) =>\n//         prevTasks.map((task) =>\n//           task.id === updatedTask.id ? updatedTask : task\n//         )\n//       );\n//       setEditModalOpen(false);\n//     } catch (error) {\n//       console.error(\"Error updating task:\", error);\n//     }\n//   };\n\n//   // Handle task deletion\n//  // Handle Task Deletion\n//  const handleDeleteTask = async (taskId) => {\n//   try {\n//     const response = await deleteTask(taskId); // Call delete API\n//     console.log(\"Delete API Response:\", response.data);\n//     // Update state to remove the deleted task\n//     setTasks((prevTasks) => prevTasks.filter((task) => task.id !== taskId));\n//   } catch (error) {\n//     console.error(\"Error deleting task:\", error.response || error.message);\n//   }\n// };\n\n//   return (\n//     <div className=\"task-list-container\">\n//       <h1>Real-Time Task Management Dashboard</h1>\n//       <button onClick={handleAddTask} className=\"add-task-btn\">\n//         Add Task\n//       </button>\n\n//       <table className=\"task-table\">\n//         <thead>\n//           <tr>\n//             <th>Task ID</th>\n//             <th>Task Name</th>\n//             <th>Status</th>\n//             <th>Created At</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {tasks.map((task) => (\n//             <tr key={task.id}>\n//               <td>{task.id}</td>\n//               <td>{task.name}</td>\n//               <td>{task.status}</td>\n//               <td>{task.createdAt}</td>\n//               <td>\n//                 <span\n//                   className=\"edit-icon\"\n//                   onClick={() => handleEditClick(task)}\n//                 >\n//                   ✏️\n//                 </span>\n//                 <FaTrashAlt \n//                   className=\"icon delete-icon\" \n//                   onClick={() => handleDeleteTask(task.id)} \n//                 />\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n\n//       {/* Add Task Modal */}\n//       <TaskModal\n//         isOpen={isModalOpen}\n//         onClose={() => setModalOpen(false)}\n//         onTaskAdded={handleTaskAdded}\n//       />\n\n//       {/* Edit Task Modal */}\n//       <EditTaskModal\n//         isOpen={isEditModalOpen}\n//         onClose={() => setEditModalOpen(false)}\n//         task={selectedTask}\n//         onTaskUpdated={handleTaskUpdated}\n//       />\n//     </div>\n//   );\n// };\n\n// export default TaskList;\n\nimport React, { useEffect, useState } from \"react\";\nimport { getTasks } from \"../api\"; // Assuming you have an API utility\nimport { io } from \"socket.io-client\";\nimport \"./TaskList.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://localhost:5000\"); // Connect to the backend server\n\nconst TaskList = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n\n  // Fetch tasks on initial render\n  useEffect(() => {\n    const fetchTasks = async () => {\n      try {\n        const taskList = await getTasks();\n        setTasks(taskList);\n      } catch (error) {\n        console.error(\"Error fetching tasks:\", error);\n      }\n    };\n    fetchTasks();\n  }, []);\n\n  // Listen for real-time task updates\n  useEffect(() => {\n    socket.on(\"task-updated\", data => {\n      console.log(\"Real-time update received:\", data);\n      if (data.type === \"added\") {\n        setTasks(prevTasks => [...prevTasks, data.task]);\n      } else if (data.type === \"deleted\") {\n        setTasks(prevTasks => prevTasks.filter(task => task.id !== data.taskId));\n      } else if (data.type === \"updated\") {\n        setTasks(prevTasks => prevTasks.map(task => task.id === data.task.id ? data.task : task));\n      }\n    });\n    return () => {\n      socket.off(\"task-updated\"); // Clean up the socket listener\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"task-list-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Real-Time Task Management Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"task-table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: tasks.map(task => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: task.id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: task.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: task.status\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 15\n          }, this)]\n        }, task.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 195,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskList, \"weOf0VesAdD4xw+rXOOhYK4d8/M=\");\n_c = TaskList;\nexport default TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["React","useEffect","useState","getTasks","io","jsxDEV","_jsxDEV","socket","TaskList","_s","tasks","setTasks","fetchTasks","taskList","error","console","on","data","log","type","prevTasks","task","filter","id","taskId","map","off","className","children","fileName","_jsxFileName","lineNumber","columnNumber","name","status","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Desktop/ReactForm/realtime-app/frontend/src/componets/TaskList.js"],"sourcesContent":["\r\n\r\n\r\n\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n// import { getTasks, deleteTask, updateTaskStatus, addTask } from \"../api\"; // Import API utilities\r\n// import TaskModal from \"./TaskModal\";\r\n// import EditTaskModal from \"./EditTaskModal\"; \r\n// import \"./TaskList.css\";\r\n// import { FaTrashAlt } from \"react-icons/fa\"; \r\n\r\n// const TaskList = () => {\r\n//   const [tasks, setTasks] = useState([]);\r\n//   const [isModalOpen, setModalOpen] = useState(false);\r\n//   const [isEditModalOpen, setEditModalOpen] = useState(false);\r\n//   const [selectedTask, setSelectedTask] = useState(null);\r\n\r\n//   // Fetch tasks from the backend\r\n//   const fetchTasks = async () => {\r\n//     try {\r\n//       const taskList = await getTasks();\r\n//       setTasks(taskList);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching tasks:\", error);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetchTasks();\r\n//   }, []);\r\n\r\n//   // Show the Add Task modal\r\n//   const handleAddTask = () => setModalOpen(true);\r\n\r\n//   // Handle task addition\r\n//   const handleTaskAdded = async (newTask) => {\r\n//     try {\r\n//       const addedTask = await addTask(newTask);\r\n//       setTasks((prevTasks) => [...prevTasks, addedTask]);\r\n//     } catch (error) {\r\n//       console.error(\"Error adding task:\", error);\r\n//     }\r\n//   };\r\n\r\n//   // Handle Edit icon click\r\n//   const handleEditClick = (task) => {\r\n//     setSelectedTask(task);\r\n//     setEditModalOpen(true);\r\n//   };\r\n\r\n//   // Handle task update\r\n//   const handleTaskUpdated = async (updatedTask) => {\r\n//     try {\r\n//       await updateTaskStatus(updatedTask.id, updatedTask);\r\n//       setTasks((prevTasks) =>\r\n//         prevTasks.map((task) =>\r\n//           task.id === updatedTask.id ? updatedTask : task\r\n//         )\r\n//       );\r\n//       setEditModalOpen(false);\r\n//     } catch (error) {\r\n//       console.error(\"Error updating task:\", error);\r\n//     }\r\n//   };\r\n\r\n//   // Handle task deletion\r\n//  // Handle Task Deletion\r\n//  const handleDeleteTask = async (taskId) => {\r\n//   try {\r\n//     const response = await deleteTask(taskId); // Call delete API\r\n//     console.log(\"Delete API Response:\", response.data);\r\n//     // Update state to remove the deleted task\r\n//     setTasks((prevTasks) => prevTasks.filter((task) => task.id !== taskId));\r\n//   } catch (error) {\r\n//     console.error(\"Error deleting task:\", error.response || error.message);\r\n//   }\r\n// };\r\n\r\n  \r\n  \r\n\r\n//   return (\r\n//     <div className=\"task-list-container\">\r\n//       <h1>Real-Time Task Management Dashboard</h1>\r\n//       <button onClick={handleAddTask} className=\"add-task-btn\">\r\n//         Add Task\r\n//       </button>\r\n\r\n//       <table className=\"task-table\">\r\n//         <thead>\r\n//           <tr>\r\n//             <th>Task ID</th>\r\n//             <th>Task Name</th>\r\n//             <th>Status</th>\r\n//             <th>Created At</th>\r\n//             <th>Actions</th>\r\n//           </tr>\r\n//         </thead>\r\n//         <tbody>\r\n//           {tasks.map((task) => (\r\n//             <tr key={task.id}>\r\n//               <td>{task.id}</td>\r\n//               <td>{task.name}</td>\r\n//               <td>{task.status}</td>\r\n//               <td>{task.createdAt}</td>\r\n//               <td>\r\n//                 <span\r\n//                   className=\"edit-icon\"\r\n//                   onClick={() => handleEditClick(task)}\r\n//                 >\r\n//                   ✏️\r\n//                 </span>\r\n//                 <FaTrashAlt \r\n//                   className=\"icon delete-icon\" \r\n//                   onClick={() => handleDeleteTask(task.id)} \r\n//                 />\r\n//               </td>\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </table>\r\n\r\n//       {/* Add Task Modal */}\r\n//       <TaskModal\r\n//         isOpen={isModalOpen}\r\n//         onClose={() => setModalOpen(false)}\r\n//         onTaskAdded={handleTaskAdded}\r\n//       />\r\n\r\n//       {/* Edit Task Modal */}\r\n//       <EditTaskModal\r\n//         isOpen={isEditModalOpen}\r\n//         onClose={() => setEditModalOpen(false)}\r\n//         task={selectedTask}\r\n//         onTaskUpdated={handleTaskUpdated}\r\n//       />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default TaskList;\r\n\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { getTasks } from \"../api\"; // Assuming you have an API utility\r\nimport { io } from \"socket.io-client\";\r\nimport \"./TaskList.css\";\r\n\r\nconst socket = io(\"http://localhost:5000\"); // Connect to the backend server\r\n\r\nconst TaskList = () => {\r\n  const [tasks, setTasks] = useState([]);\r\n\r\n  // Fetch tasks on initial render\r\n  useEffect(() => {\r\n    const fetchTasks = async () => {\r\n      try {\r\n        const taskList = await getTasks();\r\n        setTasks(taskList);\r\n      } catch (error) {\r\n        console.error(\"Error fetching tasks:\", error);\r\n      }\r\n    };\r\n\r\n    fetchTasks();\r\n  }, []);\r\n\r\n  // Listen for real-time task updates\r\n  useEffect(() => {\r\n    socket.on(\"task-updated\", (data) => {\r\n      console.log(\"Real-time update received:\", data);\r\n\r\n      if (data.type === \"added\") {\r\n        setTasks((prevTasks) => [...prevTasks, data.task]);\r\n      } else if (data.type === \"deleted\") {\r\n        setTasks((prevTasks) =>\r\n          prevTasks.filter((task) => task.id !== data.taskId)\r\n        );\r\n      } else if (data.type === \"updated\") {\r\n        setTasks((prevTasks) =>\r\n          prevTasks.map((task) =>\r\n            task.id === data.task.id ? data.task : task\r\n          )\r\n        );\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      socket.off(\"task-updated\"); // Clean up the socket listener\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"task-list-container\">\r\n      <h1>Real-Time Task Management Dashboard</h1>\r\n      <table className=\"task-table\">\r\n        <thead>\r\n          <tr>\r\n            <th>ID</th>\r\n            <th>Name</th>\r\n            <th>Status</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {tasks.map((task) => (\r\n            <tr key={task.id}>\r\n              <td>{task.id}</td>\r\n              <td>{task.name}</td>\r\n              <td>{task.status}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskList;\r\n"],"mappings":";;AAKA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,QAAQ,QAAQ,QAAQ,CAAC,CAAC;AACnC,SAASC,EAAE,QAAQ,kBAAkB;AACrC,OAAO,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExB,MAAMC,MAAM,GAAGH,EAAE,CAAC,uBAAuB,CAAC,CAAC,CAAC;;AAE5C,MAAMI,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;;EAEtC;EACAD,SAAS,CAAC,MAAM;IACd,MAAMW,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMV,QAAQ,CAAC,CAAC;QACjCQ,QAAQ,CAACE,QAAQ,CAAC;MACpB,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC/C;IACF,CAAC;IAEDF,UAAU,C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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}