{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\ReactForm\\\\realtime-app\\\\frontend\\\\src\\\\componets\\\\TaskList.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// import { getTasks } from \"../api\"; // Assuming you have a function to fetch tasks\n// import TaskModal from \"./TaskModal\";\n// import \"./TaskList.css\"; \n\n// const TaskList = () => {\n//   const [tasks, setTasks] = useState([]);\n//   const [isModalOpen, setModalOpen] = useState(false);\n\n//   // Fetch tasks from the backend\n//   const fetchTasks = async () => {\n//     try {\n//       const taskList = await getTasks(); // Replace with actual API call\n//       setTasks(taskList);\n//     } catch (error) {\n//       console.error(\"Error fetching tasks:\", error);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchTasks(); // Load tasks on page load\n//   }, []);\n\n//   // Show the Add Task modal\n//   const handleAddTask = () => {\n//     setModalOpen(true);\n//   };\n\n//   // Handle task addition\n//   const handleTaskAdded = (newTask) => {\n//     setTasks((prevTasks) => [...prevTasks, newTask]); // Add new task to the list\n//   };\n\n//   return (\n//     <div className=\"task-list-container\">\n//       <h1>Real-Time Task Management Dashboard</h1>\n//       <button onClick={handleAddTask} className=\"add-task-btn\">Add Task</button>\n\n//       <table className=\"task-table\">\n//         <thead>\n//           <tr>\n//             <th>Task ID</th>\n//             <th>Task Name</th>\n//             <th>Status</th>\n//             <th>Created At</th>\n//             <th>Action</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {tasks.map((task) => (\n//             <tr key={task.id}>\n//               <td>{task.id}</td>\n//               <td>{task.name}</td>\n//               <td>{task.status}</td>\n//               <td>{task.createdAt}</td>\n//               <td>{task.action}</td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n\n//       {/* Add Task Modal */}\n//       <TaskModal\n//         isOpen={isModalOpen}\n//         onClose={() => setModalOpen(false)}\n//         onTaskAdded={handleTaskAdded}\n//       />\n//     </div>\n//   );\n// };\n\n// export default TaskList;\n\n// import React, { useEffect, useState } from \"react\";\n// import { getTasks } from \"../api\"; // Assuming you have a function to fetch tasks\n// import { FaEdit, FaTrashAlt } from \"react-icons/fa\"; // Importing the edit and delete icons\n// import TaskModal from \"./TaskModal\";\n// import \"./TaskList.css\";\n\n// const TaskList = () => {\n//   const [tasks, setTasks] = useState([]);\n//   const [isModalOpen, setModalOpen] = useState(false);\n\n//   // Fetch tasks from the backend\n//   const fetchTasks = async () => {\n//     try {\n//       const taskList = await getTasks(); // Replace with actual API call\n//       setTasks(taskList);\n//     } catch (error) {\n//       console.error(\"Error fetching tasks:\", error);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchTasks(); // Load tasks on page load\n//   }, []);\n\n//   // Show the Add Task modal\n//   const handleAddTask = () => {\n//     setModalOpen(true);\n//   };\n\n//   // Handle task addition\n//   const handleTaskAdded = (newTask) => {\n//     setTasks((prevTasks) => [...prevTasks, newTask]); // Add new task to the list\n//   };\n\n//   // Handle Edit task\n//   const handleEditTask = (taskId) => {\n//     // Implement edit functionality, e.g., opening a modal to edit the task\n//     console.log(`Edit task with ID: ${taskId}`);\n//   };\n\n//   // Handle Delete task\n//   const handleDeleteTask = (taskId) => {\n//     // Implement delete functionality, e.g., calling API to delete the task\n//     console.log(`Delete task with ID: ${taskId}`);\n//   };\n\n//   return (\n//     <div className=\"task-list-container\">\n//       <h1>Real-Time Task Management Dashboard</h1>\n//       <button onClick={handleAddTask} className=\"add-task-btn\">Add Task</button>\n\n//       <table className=\"task-table\">\n//         <thead>\n//           <tr>\n//             <th>Task ID</th>\n//             <th>Task Name</th>\n//             <th>Status</th>\n//             <th>Created At</th>\n//             <th>Action</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {tasks.map((task) => (\n//             <tr key={task.id}>\n//               <td>{task.id}</td>\n//               <td>{task.name}</td>\n//               <td>{task.status}</td>\n//               <td>{task.createdAt}</td>\n//               <td>\n//                 {/* Edit and Delete Icons */}\n//                 <FaEdit \n//                   className=\"icon edit-icon\" \n//                   onClick={() => handleEditTask(task.id)} \n//                 />\n//                 <FaTrashAlt \n//                   className=\"icon delete-icon\" \n//                   onClick={() => handleDeleteTask(task.id)} \n//                 />\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n\n//       {/* Add Task Modal */}\n//       <TaskModal\n//         isOpen={isModalOpen}\n//         onClose={() => setModalOpen(false)}\n//         onTaskAdded={handleTaskAdded}\n//       />\n//     </div>\n//   );\n// };\n\n// export default TaskList;\n\nimport React, { useEffect, useState } from \"react\";\nimport { getTasks } from \"../api\"; // Assuming you have a function to fetch tasks\nimport EditTaskModal from \"./EditTaskModal\"; // Import the Edit Task Form component\nimport \"./TaskList.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskList = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [isEditFormOpen, setEditFormOpen] = useState(false);\n  const [currentTask, setCurrentTask] = useState(null); // Store the task being edited\n\n  // Fetch tasks from the backend\n  const fetchTasks = async () => {\n    try {\n      const taskList = await getTasks(); // Replace with actual API call\n      setTasks(taskList);\n    } catch (error) {\n      console.error(\"Error fetching tasks:\", error);\n    }\n  };\n  useEffect(() => {\n    fetchTasks(); // Load tasks on page load\n  }, []);\n\n  // Show the Edit Task form\n  const handleEditTask = task => {\n    setCurrentTask(task); // Set the task data to be edited\n    setEditFormOpen(true); // Open the Edit Task form\n  };\n\n  // Handle task update after editing\n  const handleTaskUpdated = updatedTask => {\n    setTasks(prevTasks => prevTasks.map(task => task.id === updatedTask.id ? updatedTask : task));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"task-list-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Real-Time Task Management Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"task-table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Task ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Task Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Created At\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Action\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: tasks.map(task => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: task.id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: task.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: task.status\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: task.createdAt\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleEditTask(task),\n              children: \"Edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 15\n          }, this)]\n        }, task.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this), isEditFormOpen && /*#__PURE__*/_jsxDEV(EditTaskModal, {\n      task: currentTask,\n      onClose: () => setEditFormOpen(false),\n      onTaskUpdated: handleTaskUpdated\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 220,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskList, \"vdSVM/X4Pku4+Wnm83/QLecDADg=\");\n_c = TaskList;\nexport default TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["React","useEffect","useState","getTasks","EditTaskModal","jsxDEV","_jsxDEV","TaskList","_s","tasks","setTasks","isEditFormOpen","setEditFormOpen","currentTask","setCurrentTask","fetchTasks","taskList","error","console","handleEditTask","task","handleTaskUpdated","updatedTask","prevTasks","map","id","className","children","fileName","_jsxFileName","lineNumber","columnNumber","name","status","createdAt","onClick","onClose","onTaskUpdated","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Desktop/ReactForm/realtime-app/frontend/src/componets/TaskList.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n// import { getTasks } from \"../api\"; // Assuming you have a function to fetch tasks\r\n// import TaskModal from \"./TaskModal\";\r\n// import \"./TaskList.css\"; \r\n\r\n\r\n// const TaskList = () => {\r\n//   const [tasks, setTasks] = useState([]);\r\n//   const [isModalOpen, setModalOpen] = useState(false);\r\n\r\n//   // Fetch tasks from the backend\r\n//   const fetchTasks = async () => {\r\n//     try {\r\n//       const taskList = await getTasks(); // Replace with actual API call\r\n//       setTasks(taskList);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching tasks:\", error);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetchTasks(); // Load tasks on page load\r\n//   }, []);\r\n\r\n//   // Show the Add Task modal\r\n//   const handleAddTask = () => {\r\n//     setModalOpen(true);\r\n//   };\r\n\r\n//   // Handle task addition\r\n//   const handleTaskAdded = (newTask) => {\r\n//     setTasks((prevTasks) => [...prevTasks, newTask]); // Add new task to the list\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"task-list-container\">\r\n//       <h1>Real-Time Task Management Dashboard</h1>\r\n//       <button onClick={handleAddTask} className=\"add-task-btn\">Add Task</button>\r\n\r\n//       <table className=\"task-table\">\r\n//         <thead>\r\n//           <tr>\r\n//             <th>Task ID</th>\r\n//             <th>Task Name</th>\r\n//             <th>Status</th>\r\n//             <th>Created At</th>\r\n//             <th>Action</th>\r\n//           </tr>\r\n//         </thead>\r\n//         <tbody>\r\n//           {tasks.map((task) => (\r\n//             <tr key={task.id}>\r\n//               <td>{task.id}</td>\r\n//               <td>{task.name}</td>\r\n//               <td>{task.status}</td>\r\n//               <td>{task.createdAt}</td>\r\n//               <td>{task.action}</td>\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </table>\r\n\r\n//       {/* Add Task Modal */}\r\n//       <TaskModal\r\n//         isOpen={isModalOpen}\r\n//         onClose={() => setModalOpen(false)}\r\n//         onTaskAdded={handleTaskAdded}\r\n//       />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default TaskList;\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n// import { getTasks } from \"../api\"; // Assuming you have a function to fetch tasks\r\n// import { FaEdit, FaTrashAlt } from \"react-icons/fa\"; // Importing the edit and delete icons\r\n// import TaskModal from \"./TaskModal\";\r\n// import \"./TaskList.css\";\r\n\r\n// const TaskList = () => {\r\n//   const [tasks, setTasks] = useState([]);\r\n//   const [isModalOpen, setModalOpen] = useState(false);\r\n\r\n//   // Fetch tasks from the backend\r\n//   const fetchTasks = async () => {\r\n//     try {\r\n//       const taskList = await getTasks(); // Replace with actual API call\r\n//       setTasks(taskList);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching tasks:\", error);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetchTasks(); // Load tasks on page load\r\n//   }, []);\r\n\r\n//   // Show the Add Task modal\r\n//   const handleAddTask = () => {\r\n//     setModalOpen(true);\r\n//   };\r\n\r\n//   // Handle task addition\r\n//   const handleTaskAdded = (newTask) => {\r\n//     setTasks((prevTasks) => [...prevTasks, newTask]); // Add new task to the list\r\n//   };\r\n\r\n//   // Handle Edit task\r\n//   const handleEditTask = (taskId) => {\r\n//     // Implement edit functionality, e.g., opening a modal to edit the task\r\n//     console.log(`Edit task with ID: ${taskId}`);\r\n//   };\r\n\r\n//   // Handle Delete task\r\n//   const handleDeleteTask = (taskId) => {\r\n//     // Implement delete functionality, e.g., calling API to delete the task\r\n//     console.log(`Delete task with ID: ${taskId}`);\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"task-list-container\">\r\n//       <h1>Real-Time Task Management Dashboard</h1>\r\n//       <button onClick={handleAddTask} className=\"add-task-btn\">Add Task</button>\r\n\r\n//       <table className=\"task-table\">\r\n//         <thead>\r\n//           <tr>\r\n//             <th>Task ID</th>\r\n//             <th>Task Name</th>\r\n//             <th>Status</th>\r\n//             <th>Created At</th>\r\n//             <th>Action</th>\r\n//           </tr>\r\n//         </thead>\r\n//         <tbody>\r\n//           {tasks.map((task) => (\r\n//             <tr key={task.id}>\r\n//               <td>{task.id}</td>\r\n//               <td>{task.name}</td>\r\n//               <td>{task.status}</td>\r\n//               <td>{task.createdAt}</td>\r\n//               <td>\r\n//                 {/* Edit and Delete Icons */}\r\n//                 <FaEdit \r\n//                   className=\"icon edit-icon\" \r\n//                   onClick={() => handleEditTask(task.id)} \r\n//                 />\r\n//                 <FaTrashAlt \r\n//                   className=\"icon delete-icon\" \r\n//                   onClick={() => handleDeleteTask(task.id)} \r\n//                 />\r\n//               </td>\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </table>\r\n\r\n//       {/* Add Task Modal */}\r\n//       <TaskModal\r\n//         isOpen={isModalOpen}\r\n//         onClose={() => setModalOpen(false)}\r\n//         onTaskAdded={handleTaskAdded}\r\n//       />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default TaskList;\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { getTasks } from \"../api\"; // Assuming you have a function to fetch tasks\r\nimport EditTaskModal from \"./EditTaskModal\"; // Import the Edit Task Form component\r\nimport \"./TaskList.css\"; \r\n\r\nconst TaskList = () => {\r\n  const [tasks, setTasks] = useState([]);\r\n  const [isEditFormOpen, setEditFormOpen] = useState(false);\r\n  const [currentTask, setCurrentTask] = useState(null); // Store the task being edited\r\n\r\n  // Fetch tasks from the backend\r\n  const fetchTasks = async () => {\r\n    try {\r\n      const taskList = await getTasks(); // Replace with actual API call\r\n      setTasks(taskList);\r\n    } catch (error) {\r\n      console.error(\"Error fetching tasks:\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchTasks(); // Load tasks on page load\r\n  }, []);\r\n\r\n  // Show the Edit Task form\r\n  const handleEditTask = (task) => {\r\n    setCurrentTask(task); // Set the task data to be edited\r\n    setEditFormOpen(true); // Open the Edit Task form\r\n  };\r\n\r\n  // Handle task update after editing\r\n  const handleTaskUpdated = (updatedTask) => {\r\n    setTasks((prevTasks) =>\r\n      prevTasks.map((task) =>\r\n        task.id === updatedTask.id ? updatedTask : task\r\n      )\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"task-list-container\">\r\n      <h1>Real-Time Task Management Dashboard</h1>\r\n\r\n      <table className=\"task-table\">\r\n        <thead>\r\n          <tr>\r\n            <th>Task ID</th>\r\n            <th>Task Name</th>\r\n            <th>Status</th>\r\n            <th>Created At</th>\r\n            <th>Action</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {tasks.map((task) => (\r\n            <tr key={task.id}>\r\n              <td>{task.id}</td>\r\n              <td>{task.name}</td>\r\n              <td>{task.status}</td>\r\n              <td>{task.createdAt}</td>\r\n              <td>\r\n                <button onClick={() => handleEditTask(task)}>Edit</button>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n\r\n      {/* Edit Task Form */}\r\n      {isEditFormOpen && (\r\n        <EditTaskModal\r\n          task={currentTask}\r\n          onClose={() => setEditFormOpen(false)}\r\n          onTaskUpdated={handleTaskUpdated}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskList;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAOA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAMA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,QAAQ,QAAQ,QAAQ,CAAC,CAAC;AACnC,OAAOC,aAAa,MAAM,iBAAiB,CAAC,CAAC;AAC7C,OAAO,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExB,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACS,cAAc,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAEtD;EACA,MAAMa,UAAU,GAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}